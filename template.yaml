AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Books Library API with Cognito authentication - Lists and downloads books from S3

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket name for storing books and hosting frontend
    AllowedPattern: ^[a-z0-9][a-z0-9-]*[a-z0-9]$
    ConstraintDescription: Bucket name must be lowercase, alphanumeric with hyphens
  
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID (e.g., us-east-1_XXXXXXXXX)
  
  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool ARN
  
  CognitoClientId:
    Type: String
    Description: Cognito User Pool Client ID

Resources:
  # DynamoDB table for book metadata
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Books
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # DynamoDB table for user-specific book data (read status, etc.)
  UserBooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserBooks
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: bookId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: bookId
          KeyType: RANGE

  BooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.list_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          BOOKS_PREFIX: books/
          BOOKS_TABLE: !Ref BooksTable
          USER_BOOKS_TABLE: !Ref UserBooksTable
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserBooksTable
      Events:
        BooksApi:
          Type: Api
          Properties:
            Path: /books
            Method: get
            RestApiId: !Ref BooksApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.get_book_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          BOOKS_PREFIX: books/
          BOOKS_TABLE: !Ref BooksTable
          USER_BOOKS_TABLE: !Ref UserBooksTable
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserBooksTable
      Events:
        GetBookApi:
          Type: Api
          Properties:
            Path: /books/{id}
            Method: get
            RestApiId: !Ref BooksApi
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.update_book_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable
          USER_BOOKS_TABLE: !Ref UserBooksTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserBooksTable
      Events:
        UpdateBookApi:
          Type: Api
          Properties:
            Path: /books/{id}
            Method: patch
            RestApiId: !Ref BooksApi
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.delete_book_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable
          USER_BOOKS_TABLE: !Ref UserBooksTable
          BUCKET_NAME: !Ref BucketName
          BOOKS_PREFIX: books/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserBooksTable
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Events:
        DeleteBookApi:
          Type: Api
          Properties:
            Path: /books/{id}
            Method: delete
            RestApiId: !Ref BooksApi
            Auth:
              Authorizer: CognitoAuthorizer

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.upload_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable
          BUCKET_NAME: !Ref BucketName
          BOOKS_PREFIX: books/
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObjectTagging
              - s3:GetObjectTagging
            Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
      Events:
        UploadApi:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId: !Ref BooksApi
            Auth:
              Authorizer: CognitoAuthorizer

  SetUploadMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.set_upload_metadata_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable
      Events:
        SetMetadataApi:
          Type: Api
          Properties:
            Path: /upload/metadata
            Method: post
            RestApiId: !Ref BooksApi
            Auth:
              Authorizer: CognitoAuthorizer

  S3TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.s3_trigger_handler
      Runtime: python3.12
      CodeUri: gateway_backend/
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable
          BUCKET_NAME: !Ref BucketName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable
        - S3ReadPolicy:
            BucketName: !Ref BucketName
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObjectTagging
            Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
      # Note: S3 event trigger must be configured manually on existing bucket
      # or use 'aws s3api put-bucket-notification-configuration' after deployment

  BooksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowMethods: "'GET,POST,PATCH,DELETE,OPTIONS'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${BooksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  
  S3TriggerFunctionArn:
    Description: "S3 Trigger Lambda Function ARN (needed for S3 configuration)"
    Value: !GetAtt S3TriggerFunction.Arn
  
  BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref BucketName
  
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPoolId
  
  CognitoClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoClientId
